//
//  PWApplicationOpenTest.m
//  PushNotificationManager
//
//  Created by Dmitry Malugin on 07/12/16.
//  Copyright Â© 2016 Pushwoosh. All rights reserved.
//

#import "PWRequestManagerMock.h"
#import "PWNetworkModule.h"
#import "PWTestUtils.h"
#import "PushNotificationManager.h"
#import "PWAppOpenRequest.h"
#import "PWPlatformModule.h"
#import "PWNotificationManagerCompat.h"
#import "PWVersionTracking.h"

#import <OCHamcrest/OCHamcrest.h>
#import <OCMockito/OCMockito.h>

#import <XCTest/XCTest.h>

@interface PWApplicationOpenTest : XCTestCase

@property (nonatomic, strong) PushNotificationManager *pushManager;

@property (nonatomic, strong) PWRequestManager *originalRequestManager;

@property (nonatomic, strong) PWRequestManagerMock *mockRequestManager;

@property (nonatomic, strong) PWNotificationManagerCompat *originalNotificationManager;

@end

@implementation PWApplicationOpenTest

- (void)setUp {
    [super setUp];
	
	[PWTestUtils setUp];
	
	self.originalRequestManager = [PWNetworkModule module].requestManager;
	self.mockRequestManager = [PWRequestManagerMock new];
	[PWNetworkModule module].requestManager = self.mockRequestManager;
	
	self.originalNotificationManager = [PWPlatformModule module].notificationManagerCompat;
	[PWPlatformModule module].notificationManagerCompat = mock([PWNotificationManagerCompat class]);
	
	[PushNotificationManager initializeWithAppCode:@"4FC89B6D14A655.46488481" appName:@"UnitTest"];
	self.pushManager = [PushNotificationManager pushManager];
    
    [PWTestUtils mockStaticMethodForClass:[PWVersionTracking class] selector:@selector(currentVersion) block:^(id obj, SEL sel){
        return @"123";
    }];
    [PWTestUtils mockStaticMethodForClass:[PWVersionTracking class] selector:@selector(currentBuild) block:^(id obj, SEL sel){
        return @"321";
    }];
}

- (void)tearDown {
	[PWNetworkModule module].requestManager = self.originalRequestManager;
	[PWPlatformModule module].notificationManagerCompat = self.originalNotificationManager;
	
	[PWTestUtils tearDown];
	
    [super tearDown];
}
////- (void)sendAppOpen part

//tests method cause requestManager to send correct request
- (void)testApplicationOpen {
    
    //Precondition:
	XCTestExpectation *requestExpectation = [self expectationWithDescription:@"requestExpectation"];
	
	__block PWRequest *appOpenRequest = nil;
	
	self.mockRequestManager.onSendRequest = ^(PWRequest *request) {
		if ([request isKindOfClass:[PWAppOpenRequest class]]) {
			appOpenRequest = request;
			[requestExpectation fulfill];
		}
	};
	
    //Steps:
	[_pushManager sendAppOpen];
    [self waitForExpectationsWithTimeout:5 handler:nil];
    
    //Postcondition:
	NSDictionary *requestDictionary = [appOpenRequest requestDictionary];
	NSLog(@"appOpen: %@", requestDictionary);
	
	assertThat(requestDictionary, hasKey(@"application"));
	assertThat(requestDictionary, hasKey(@"device_model"));
	assertThat(requestDictionary, hasKey(@"device_type"));
	assertThat(requestDictionary, hasKey(@"hwid"));
	assertThat(requestDictionary, hasKey(@"language"));
	assertThat(requestDictionary, hasKey(@"userId"));
	assertThat(requestDictionary, hasKey(@"v"));
    assertThat(requestDictionary, hasKey(@"timezone"));
}

//tests double method call works
- (void)testDoubleApplicationOpen {
    
    //Precondition:
	__block int counter = 0;
	
	XCTestExpectation *requestExpectation = [self expectationWithDescription:@"requestExpectation"];
	
	self.mockRequestManager.onSendRequest = ^(PWRequest *request) {
		if ([request isKindOfClass:[PWAppOpenRequest class]]) {
			counter++;
            XCTAssert(counter == 1, "extra applicationOpen request");
		}
	};
	
    //Steps:
	[_pushManager sendAppOpen];
	[_pushManager sendAppOpen];
    
    [requestExpectation fulfill];
	
    [self waitForExpectationsWithTimeout:5 handler:^(NSError * _Nullable error) {
        
    }];
    
    //Postcondition:
}

@end
